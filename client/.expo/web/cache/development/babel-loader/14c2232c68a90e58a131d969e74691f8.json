{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/rachael-andrew/Bootcamp/Project-3:AuthAPI/project-3/node_modules/react-native-basic-form/core/Form.js\";\nimport React, { useMemo, useReducer } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Button } from 'react-native-elements';\nimport reducer, { SET_ERROR, TEXT_CHANGE } from \"./reducer\";\nimport TextInput from \"../helpers/TextInput.js\";\nimport DropDown from \"../helpers/DropDown\";\nimport Image from \"../helpers/Image\";\nimport DateInput from \"../helpers/DateInput\";\nvar FormContext = React.createContext();\nexport var TYPES = {\n  Text: \"default\",\n  Number: \"numeric\",\n  Dropdown: \"dropdown\",\n  Image: \"image\",\n  Date: \"date\"\n};\nexport default function Form(props) {\n  var fields = props.fields,\n      initialData = props.initialData,\n      onSubmit = props.onSubmit,\n      title = props.title,\n      loading = props.loading,\n      showImagePicker = props.showImagePicker;\n  var keyboardShouldPersistTaps = props.keyboardShouldPersistTaps,\n      buttonStyle = props.buttonStyle;\n  var scrollViewProps = {\n    keyboardShouldPersistTaps: keyboardShouldPersistTaps,\n    showsVerticalScrollIndicator: false\n  };\n  var error = {};\n  var initialState = {};\n  fields.map(function (field, idx) {\n    var arr = Array.isArray(field);\n\n    if (!arr) {\n      initialState[field.name] = initialData && initialData[field.name] ? String(initialData[field.name]) : \"\";\n      error[field.name] = \"\";\n    } else if (arr) {\n      field.map(function (fld, index) {\n        initialState[fld.name] = initialData && initialData[fld.name] ? String(initialData[fld.name]) : \"\";\n        error[fld.name] = \"\";\n      });\n    }\n  });\n  initialState[\"error\"] = error;\n\n  var _useReducer = useReducer(reducer, initialState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var changeText = function changeText(name) {\n    return function (text) {\n      dispatch({\n        type: TEXT_CHANGE,\n        name: name,\n        text: text\n      });\n    };\n  };\n\n  var onPress = function onPress() {\n    var error, clone, validateKeys, isValid, error_;\n    return _regeneratorRuntime.async(function onPress$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            error = state.error, clone = _objectWithoutProperties(state, [\"error\"]);\n            validateKeys = [];\n            Object.keys(clone).map(function (key, idx) {\n              var index = fields.findIndex(function (obj) {\n                return obj.name === key;\n              });\n\n              if (index !== -1 && fields[index]['required'] === true) {\n                validateKeys.push(key);\n              }\n            });\n            isValid = validateKeys.every(function (key) {\n              return !!state[key];\n            });\n            error_ = validateKeys.reduce(function (obj, key) {\n              obj[key] = !state[key] || 0 === state[key].length ? capitalizeFirstLetter(key) + \" is required\" : '';\n              return obj;\n            }, {});\n\n            if (isValid) {\n              _context.next = 9;\n              break;\n            }\n\n            handleError(error_);\n            _context.next = 11;\n            break;\n\n          case 9:\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(onSubmit(clone));\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  var handleError = function handleError(error) {\n    Alert.alert('Input error', 'Please input all required fields.');\n    dispatch({\n      type: SET_ERROR,\n      error: error\n    });\n  };\n\n  var renderTextInput = function renderTextInput(field, index) {\n    var grouped = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var name = field.name;\n    var onChangeText = changeText(name);\n    var errorMessage = state[\"error\"].hasOwnProperty(name) ? state[\"error\"][name] : null;\n    var key = !grouped ? name + \"_\" + index : name + \"_arr_\" + index;\n    var type = field.type || TYPES.Text;\n    var Component = React.createElement(TextInput, _extends({}, field, {\n      value: state[name],\n      errorMessage: errorMessage,\n      onChangeText: onChangeText,\n      keyboardType: type,\n      testID: field.testID || name,\n      key: key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 14\n      }\n    }));\n\n    if (type === TYPES.Dropdown) {\n      Component = React.createElement(DropDown, {\n        label: field.label,\n        items: field.options,\n        value: state[name],\n        errorMessage: errorMessage,\n        onValueChange: onChangeText,\n        testID: field.testID || name,\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 18\n        }\n      });\n    } else if (type === TYPES.Image) {\n      Component = React.createElement(View, {\n        style: {\n          borderBottomWidth: 1,\n          borderColor: \"#E2E2E2\",\n          paddingVertical: 16,\n          justifyContent: \"center\"\n        },\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 18\n        }\n      }, !showImagePicker ? React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 33\n        }\n      }, \"Get Permission Props Not Passed\") : React.createElement(Image, {\n        image: state[name].length > 0 ? state[name] : null,\n        size: 100,\n        borderWidth: 0,\n        getPermission: null,\n        showImagePicker: showImagePicker,\n        onImageSelected: onChangeText,\n        testID: field.testID || name,\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 33\n        }\n      }));\n    } else if (type === TYPES.Date) {\n      Component = React.createElement(DateInput, {\n        label: field.label,\n        value: state[name],\n        errorMessage: errorMessage,\n        onDateSelected: onChangeText,\n        testID: field.testID || name,\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 18\n        }\n      });\n    }\n\n    if (grouped) {\n      return React.createElement(View, {\n        style: {\n          marginLeft: index === 1 ? 16 : 0,\n          flex: 1\n        },\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 17\n        }\n      }, Component);\n    } else {\n      return Component;\n    }\n  };\n\n  var value = useMemo(function () {\n    return [state, dispatch];\n  }, [state]);\n  return React.createElement(FormContext.Provider, {\n    value: value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }, React.createElement(KeyboardAvoidingView, {\n    behavior: \"padding\",\n    style: [{\n      flex: 1\n    }, props.style],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }, React.createElement(ScrollView, _extends({}, scrollViewProps, {\n    contentContainerStyle: {},\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 17\n    }\n  }), React.createElement(View, {\n    style: {\n      justifyContent: \"center\",\n      flex: 1\n    },\n    testID: \"FormContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 21\n    }\n  }, fields.map(function (field, idx) {\n    var arr = Array.isArray(field);\n    if (!arr) return renderTextInput(field, idx);else if (arr) {\n      return React.createElement(View, {\n        style: {\n          flex: 1,\n          flexDirection: \"row\"\n        },\n        key: \"arr_\" + idx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 37\n        }\n      }, field.map(function (fld, index) {\n        return renderTextInput(fld, index, true);\n      }));\n    }\n  }), React.createElement(Button, {\n    title: title,\n    onPress: onPress,\n    loading: loading,\n    containerStyle: styles.buttonContainer,\n    buttonStyle: [styles.button, buttonStyle],\n    titleStyle: styles.buttonText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 25\n    }\n  }), props.children))));\n}\n;\nForm.defaultProps = {\n  fields: [],\n  initialData: null,\n  onSubmit: null,\n  title: \"Submit\",\n  loading: false,\n  style: {\n    backgroundColor: 'transparent'\n  },\n  buttonStyle: {},\n  keyboardShouldPersistTaps: 'handled',\n  showImagePicker: null\n};\nvar styles = StyleSheet.create({\n  buttonContainer: {\n    marginTop: 35\n  },\n  button: {\n    height: 60,\n    backgroundColor: \"#733AC2\"\n  },\n  buttonText: {\n    fontSize: 18,\n    color: \"#fff\",\n    fontFamily: \"HelveticaNeue-Medium\"\n  }\n});","map":{"version":3,"sources":["/Users/rachael-andrew/Bootcamp/Project-3:AuthAPI/project-3/node_modules/react-native-basic-form/core/Form.js"],"names":["React","useMemo","useReducer","Button","reducer","SET_ERROR","TEXT_CHANGE","TextInput","DropDown","Image","DateInput","FormContext","createContext","TYPES","Text","Number","Dropdown","Date","Form","props","fields","initialData","onSubmit","title","loading","showImagePicker","keyboardShouldPersistTaps","buttonStyle","scrollViewProps","showsVerticalScrollIndicator","error","initialState","map","field","idx","arr","Array","isArray","name","String","fld","index","state","dispatch","changeText","text","type","onPress","clone","validateKeys","Object","keys","key","findIndex","obj","push","isValid","every","error_","reduce","length","capitalizeFirstLetter","handleError","string","charAt","toUpperCase","slice","Alert","alert","renderTextInput","grouped","onChangeText","errorMessage","hasOwnProperty","Component","testID","label","options","borderBottomWidth","borderColor","paddingVertical","justifyContent","marginLeft","flex","value","style","flexDirection","styles","buttonContainer","button","buttonText","children","defaultProps","backgroundColor","StyleSheet","create","marginTop","height","fontSize","color","fontFamily"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,OAAf,EAAwBC,UAAxB,QAAyC,OAAzC;;;;;;;AAEA,SAAQC,MAAR,QAAqB,uBAArB;AAEA,OAAOC,OAAP,IAAiBC,SAAjB,EAA4BC,WAA5B;AACA,OAAOC,SAAP;AACA,OAAOC,QAAP;AACA,OAAOC,KAAP;AACA,OAAOC,SAAP;AAEA,IAAMC,WAAW,GAAGX,KAAK,CAACY,aAAN,EAApB;AAEA,OAAO,IAAMC,KAAK,GAAG;AAACC,EAAAA,IAAI,EAAE,SAAP;AAAkBC,EAAAA,MAAM,EAAE,SAA1B;AAAqCC,EAAAA,QAAQ,EAAE,UAA/C;AAA2DP,EAAAA,KAAK,EAAE,OAAlE;AAA2EQ,EAAAA,IAAI,EAAE;AAAjF,CAAd;AAEP,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA,MACzBC,MADyB,GACyCD,KADzC,CACzBC,MADyB;AAAA,MACjBC,WADiB,GACyCF,KADzC,CACjBE,WADiB;AAAA,MACJC,QADI,GACyCH,KADzC,CACJG,QADI;AAAA,MACMC,KADN,GACyCJ,KADzC,CACMI,KADN;AAAA,MACaC,OADb,GACyCL,KADzC,CACaK,OADb;AAAA,MACsBC,eADtB,GACyCN,KADzC,CACsBM,eADtB;AAAA,MAEzBC,yBAFyB,GAEiBP,KAFjB,CAEzBO,yBAFyB;AAAA,MAEEC,WAFF,GAEiBR,KAFjB,CAEEQ,WAFF;AAGhC,MAAIC,eAAe,GAAG;AAACF,IAAAA,yBAAyB,EAAzBA,yBAAD;AAA4BG,IAAAA,4BAA4B,EAAE;AAA1D,GAAtB;AAGA,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,YAAY,GAAG,EAAnB;AAEAX,EAAAA,MAAM,CAACY,GAAP,CAAW,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACvB,QAAIC,GAAG,GAAGC,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAAV;;AAEA,QAAI,CAACE,GAAL,EAAU;AACNJ,MAAAA,YAAY,CAACE,KAAK,CAACK,IAAP,CAAZ,GAA2BjB,WAAW,IAAKA,WAAW,CAACY,KAAK,CAACK,IAAP,CAA3B,GAA2CC,MAAM,CAAClB,WAAW,CAACY,KAAK,CAACK,IAAP,CAAZ,CAAjD,GAA6E,EAAxG;AACAR,MAAAA,KAAK,CAACG,KAAK,CAACK,IAAP,CAAL,GAAoB,EAApB;AACH,KAHD,MAIK,IAAIH,GAAJ,EAAS;AACVF,MAAAA,KAAK,CAACD,GAAN,CAAU,UAACQ,GAAD,EAAMC,KAAN,EAAgB;AACtBV,QAAAA,YAAY,CAACS,GAAG,CAACF,IAAL,CAAZ,GAAyBjB,WAAW,IAAIA,WAAW,CAACmB,GAAG,CAACF,IAAL,CAA1B,GAAwCC,MAAM,CAAClB,WAAW,CAACmB,GAAG,CAACF,IAAL,CAAZ,CAA9C,GAAwE,EAAjG;AACAR,QAAAA,KAAK,CAACU,GAAG,CAACF,IAAL,CAAL,GAAkB,EAAlB;AACH,OAHD;AAIH;AACJ,GAbD;AAeAP,EAAAA,YAAY,CAAC,OAAD,CAAZ,GAAwBD,KAAxB;;AAxBgC,oBAyBN5B,UAAU,CAACE,OAAD,EAAU2B,YAAV,CAzBJ;AAAA;AAAA,MAyBzBW,KAzByB;AAAA,MAyBlBC,QAzBkB;;AA4BhC,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACN,IAAD,EAAU;AACzB,WAAO,UAACO,IAAD,EAAU;AACbF,MAAAA,QAAQ,CAAC;AAACG,QAAAA,IAAI,EAAExC,WAAP;AAAoBgC,QAAAA,IAAI,EAAJA,IAApB;AAA0BO,QAAAA,IAAI,EAAJA;AAA1B,OAAD,CAAR;AACH,KAFD;AAGH,GAJD;;AAOA,MAAME,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AACLjB,YAAAA,KADK,GACcY,KADd,CACLZ,KADK,EACKkB,KADL,4BACcN,KADd;AAGNO,YAAAA,YAHM,GAGS,EAHT;AAKZC,YAAAA,MAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmBhB,GAAnB,CAAuB,UAACoB,GAAD,EAAMlB,GAAN,EAAc;AACjC,kBAAMO,KAAK,GAAGrB,MAAM,CAACiC,SAAP,CAAiB,UAACC,GAAD;AAAA,uBAASA,GAAG,CAAChB,IAAJ,KAAac,GAAtB;AAAA,eAAjB,CAAd;;AACA,kBAAIX,KAAK,KAAK,CAAC,CAAX,IAAgBrB,MAAM,CAACqB,KAAD,CAAN,CAAc,UAAd,MAA8B,IAAlD,EAAwD;AACpDQ,gBAAAA,YAAY,CAACM,IAAb,CAAkBH,GAAlB;AACH;AACJ,aALD;AAOMI,YAAAA,OAZM,GAYIP,YAAY,CAACQ,KAAb,CAAmB,UAAAL,GAAG;AAAA,qBAAI,CAAC,CAACV,KAAK,CAACU,GAAD,CAAX;AAAA,aAAtB,CAZJ;AAcNM,YAAAA,MAdM,GAcGT,YAAY,CAACU,MAAb,CAAoB,UAACL,GAAD,EAAMF,GAAN,EAAc;AAC7CE,cAAAA,GAAG,CAACF,GAAD,CAAH,GAAY,CAACV,KAAK,CAACU,GAAD,CAAN,IAAe,MAAMV,KAAK,CAACU,GAAD,CAAL,CAAWQ,MAAjC,GAA8CC,qBAAqB,CAACT,GAAD,CAAnE,oBAAyF,EAApG;AACA,qBAAOE,GAAP;AACH,aAHc,EAGZ,EAHY,CAdH;;AAAA,gBAmBPE,OAnBO;AAAA;AAAA;AAAA;;AAmBEM,YAAAA,WAAW,CAACJ,MAAD,CAAX;AAnBF;AAAA;;AAAA;AAAA;AAAA,6CAoBDpC,QAAQ,CAAC0B,KAAD,CApBP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAuBA,WAASa,qBAAT,CAA+BE,MAA/B,EAAuC;AACnC,WAAOA,MAAM,CAACC,MAAP,CAAc,CAAd,EAAiBC,WAAjB,KAAiCF,MAAM,CAACG,KAAP,CAAa,CAAb,CAAxC;AACH;;AAED,MAAMJ,WAAW,GAAG,SAAdA,WAAc,CAAChC,KAAD,EAAW;AAC3BqC,IAAAA,KAAK,CAACC,KAAN,CAAY,aAAZ,EAA2B,mCAA3B;AACAzB,IAAAA,QAAQ,CAAC;AAACG,MAAAA,IAAI,EAAEzC,SAAP;AAAkByB,MAAAA,KAAK,EAALA;AAAlB,KAAD,CAAR;AACH,GAHD;;AAMA,MAAMuC,eAAe,GAAG,SAAlBA,eAAkB,CAACpC,KAAD,EAAQQ,KAAR,EAAmC;AAAA,QAApB6B,OAAoB,uEAAV,KAAU;AAAA,QAClDhC,IADkD,GAC1CL,KAD0C,CAClDK,IADkD;AAEvD,QAAIiC,YAAY,GAAG3B,UAAU,CAACN,IAAD,CAA7B;AACA,QAAIkC,YAAY,GAAG9B,KAAK,CAAC,OAAD,CAAL,CAAe+B,cAAf,CAA8BnC,IAA9B,IAAsCI,KAAK,CAAC,OAAD,CAAL,CAAeJ,IAAf,CAAtC,GAA6D,IAAhF;AACA,QAAIc,GAAG,GAAG,CAACkB,OAAD,GAAchC,IAAd,SAAsBG,KAAtB,GAAmCH,IAAnC,aAA+CG,KAAzD;AAEA,QAAIK,IAAI,GAAGb,KAAK,CAACa,IAAN,IAAcjC,KAAK,CAACC,IAA/B;AAGA,QAAI4D,SAAS,GACR,oBAAC,SAAD,eAAezC,KAAf;AACW,MAAA,KAAK,EAAES,KAAK,CAACJ,IAAD,CADvB;AAEW,MAAA,YAAY,EAAEkC,YAFzB;AAGW,MAAA,YAAY,EAAED,YAHzB;AAIW,MAAA,YAAY,EAAEzB,IAJzB;AAKW,MAAA,MAAM,EAAEb,KAAK,CAAC0C,MAAN,IAAgBrC,IALnC;AAMW,MAAA,GAAG,EAAEc,GANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADL;;AAUA,QAAIN,IAAI,KAAKjC,KAAK,CAACG,QAAnB,EAA6B;AACzB0D,MAAAA,SAAS,GACJ,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAEzC,KAAK,CAAC2C,KAAvB;AACU,QAAA,KAAK,EAAE3C,KAAK,CAAC4C,OADvB;AAEU,QAAA,KAAK,EAAEnC,KAAK,CAACJ,IAAD,CAFtB;AAGU,QAAA,YAAY,EAAEkC,YAHxB;AAIU,QAAA,aAAa,EAAED,YAJzB;AAKU,QAAA,MAAM,EAAEtC,KAAK,CAAC0C,MAAN,IAAgBrC,IALlC;AAMU,QAAA,GAAG,EAAEc,GANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADL;AAQH,KATD,MASO,IAAIN,IAAI,KAAKjC,KAAK,CAACJ,KAAnB,EAA0B;AAC7BiE,MAAAA,SAAS,GACJ,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AACNI,UAAAA,iBAAiB,EAAE,CADb;AAENC,UAAAA,WAAW,EAAE,SAFP;AAGNC,UAAAA,eAAe,EAAE,EAHX;AAINC,UAAAA,cAAc,EAAE;AAJV,SAAb;AAKM,QAAA,GAAG,EAAE7B,GALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOW,CAAC3B,eAAD,GACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAO,iCAAP,CADJ,GAGI,oBAAC,KAAD;AACI,QAAA,KAAK,EAAEiB,KAAK,CAACJ,IAAD,CAAL,CAAYsB,MAAZ,GAAqB,CAArB,GAAyBlB,KAAK,CAACJ,IAAD,CAA9B,GAAuC,IADlD;AAEI,QAAA,IAAI,EAAE,GAFV;AAGI,QAAA,WAAW,EAAE,CAHjB;AAII,QAAA,aAAa,EAAE,IAJnB;AAKI,QAAA,eAAe,EAAEb,eALrB;AAMI,QAAA,eAAe,EAAE8C,YANrB;AAOI,QAAA,MAAM,EAAEtC,KAAK,CAAC0C,MAAN,IAAgBrC,IAP5B;AAQI,QAAA,GAAG,EAAEc,GART;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAVf,CADL;AAuBH,KAxBM,MAwBA,IAAIN,IAAI,KAAKjC,KAAK,CAACI,IAAnB,EAAyB;AAC5ByD,MAAAA,SAAS,GACJ,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAEzC,KAAK,CAAC2C,KAAxB;AACW,QAAA,KAAK,EAAElC,KAAK,CAACJ,IAAD,CADvB;AAEW,QAAA,YAAY,EAAEkC,YAFzB;AAGW,QAAA,cAAc,EAAED,YAH3B;AAIW,QAAA,MAAM,EAAEtC,KAAK,CAAC0C,MAAN,IAAgBrC,IAJnC;AAKW,QAAA,GAAG,EAAEc,GALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADL;AAOH;;AAED,QAAIkB,OAAJ,EAAa;AACT,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACY,UAAAA,UAAU,EAAEzC,KAAK,KAAK,CAAV,GAAc,EAAd,GAAmB,CAAhC;AAAmC0C,UAAAA,IAAI,EAAE;AAAzC,SAAb;AAA0D,QAAA,GAAG,EAAE/B,GAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKsB,SADL,CADJ;AAKH,KAND,MAMO;AACH,aAAOA,SAAP;AACH;AACJ,GAvED;;AA0EA,MAAMU,KAAK,GAAGnF,OAAO,CAAC;AAAA,WAAM,CAACyC,KAAD,EAAQC,QAAR,CAAN;AAAA,GAAD,EAA0B,CAACD,KAAD,CAA1B,CAArB;AACA,SACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE0C,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,oBAAD;AAAsB,IAAA,QAAQ,EAAC,SAA/B;AAAyC,IAAA,KAAK,EAAE,CAAC;AAACD,MAAAA,IAAI,EAAE;AAAP,KAAD,EAAYhE,KAAK,CAACkE,KAAlB,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD,eAAgBzD,eAAhB;AAAiC,IAAA,qBAAqB,EAAE,EAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAGI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACqD,MAAAA,cAAc,EAAE,QAAjB;AAA2BE,MAAAA,IAAI,EAAE;AAAjC,KAAb;AAAkD,IAAA,MAAM,EAAE,eAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK/D,MAAM,CAACY,GAAP,CAAW,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAExB,QAAIC,GAAG,GAAGC,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAAV;AACA,QAAI,CAACE,GAAL,EAAU,OAAOkC,eAAe,CAACpC,KAAD,EAAQC,GAAR,CAAtB,CAAV,KACK,IAAIC,GAAJ,EAAS;AACV,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACgD,UAAAA,IAAI,EAAE,CAAP;AAAUG,UAAAA,aAAa,EAAE;AAAzB,SAAb;AAA8C,QAAA,GAAG,WAASpD,GAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKD,KAAK,CAACD,GAAN,CAAU,UAACQ,GAAD,EAAMC,KAAN;AAAA,eAAgB4B,eAAe,CAAC7B,GAAD,EAAMC,KAAN,EAAa,IAAb,CAA/B;AAAA,OAAV,CADL,CADJ;AAKH;AACJ,GAXA,CADL,EAcI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAElB,KAAf;AACQ,IAAA,OAAO,EAAEwB,OADjB;AAEQ,IAAA,OAAO,EAAEvB,OAFjB;AAGQ,IAAA,cAAc,EAAE+D,MAAM,CAACC,eAH/B;AAIQ,IAAA,WAAW,EAAE,CAACD,MAAM,CAACE,MAAR,EAAgB9D,WAAhB,CAJrB;AAKQ,IAAA,UAAU,EAAE4D,MAAM,CAACG,UAL3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdJ,EAqBKvE,KAAK,CAACwE,QArBX,CAHJ,CADJ,CADJ,CADJ;AAkCH;AAAA;AAGDzE,IAAI,CAAC0E,YAAL,GAAoB;AAChBxE,EAAAA,MAAM,EAAE,EADQ;AAEhBC,EAAAA,WAAW,EAAE,IAFG;AAGhBC,EAAAA,QAAQ,EAAE,IAHM;AAIhBC,EAAAA,KAAK,EAAE,QAJS;AAKhBC,EAAAA,OAAO,EAAE,KALO;AAMhB6D,EAAAA,KAAK,EAAE;AAACQ,IAAAA,eAAe,EAAE;AAAlB,GANS;AAOhBlE,EAAAA,WAAW,EAAE,EAPG;AAQhBD,EAAAA,yBAAyB,EAAE,SARX;AAShBD,EAAAA,eAAe,EAAE;AATD,CAApB;AAYA,IAAM8D,MAAM,GAAGO,UAAU,CAACC,MAAX,CAAkB;AAC7BP,EAAAA,eAAe,EAAE;AACbQ,IAAAA,SAAS,EAAE;AADE,GADY;AAK7BP,EAAAA,MAAM,EAAE;AACJQ,IAAAA,MAAM,EAAE,EADJ;AAEJJ,IAAAA,eAAe,EAAE;AAFb,GALqB;AAU7BH,EAAAA,UAAU,EAAE;AACRQ,IAAAA,QAAQ,EAAE,EADF;AAERC,IAAAA,KAAK,EAAE,MAFC;AAGRC,IAAAA,UAAU,EAAE;AAHJ;AAViB,CAAlB,CAAf","sourcesContent":["import React, {useMemo, useReducer} from 'react';\nimport {Alert, KeyboardAvoidingView, ScrollView, StyleSheet, Text, View} from 'react-native';\nimport {Button} from 'react-native-elements';\n\nimport reducer, {SET_ERROR, TEXT_CHANGE} from \"./reducer\";\nimport TextInput from \"../helpers/TextInput.js\";\nimport DropDown from \"../helpers/DropDown\";\nimport Image from \"../helpers/Image\";\nimport DateInput from \"../helpers/DateInput\";\n\nconst FormContext = React.createContext();\n\nexport const TYPES = {Text: \"default\", Number: \"numeric\", Dropdown: \"dropdown\", Image: \"image\", Date: \"date\"};\n\nexport default function Form(props) {\n    const {fields, initialData, onSubmit, title, loading, showImagePicker} = props;\n    const {keyboardShouldPersistTaps, buttonStyle} = props;\n    let scrollViewProps = {keyboardShouldPersistTaps, showsVerticalScrollIndicator: false};\n\n    //1 - CREATE INITIAL STATE - dynamically construct the reducer initial state by using the fierds name and value(if any)\n    let error = {};\n    let initialState = {};\n\n    fields.map((field, idx) => {\n        let arr = Array.isArray(field);\n\n        if (!arr) {\n            initialState[field.name] = initialData  && initialData[field.name]  ? String(initialData[field.name]) : \"\";\n            error[field.name] = \"\";\n        }\n        else if (arr) {\n            field.map((fld, index) => {\n                initialState[fld.name] = initialData && initialData[fld.name]  ? String(initialData[fld.name]) : \"\";\n                error[fld.name] = \"\";\n            })\n        }\n    });\n\n    initialState[\"error\"] = error;\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    //2 - ON CHANGE TEXT - A function that returns a function\n    const changeText = (name) => {\n        return (text) => {\n            dispatch({type: TEXT_CHANGE, name, text});\n        }\n    };\n\n    //3 - ON PRESS - Validate before ssubmitting\n    const onPress = async () => {\n        const {error, ...clone} = state;\n\n        const validateKeys = [];\n\n        Object.keys(clone).map((key, idx) => {\n            const index = fields.findIndex((obj) => obj.name === key);\n            if (index !== -1 && fields[index]['required'] === true) {\n                validateKeys.push(key)\n            }\n        });\n\n        const isValid = validateKeys.every(key => !!state[key]);\n\n        const error_ = validateKeys.reduce((obj, key) => {\n            obj[key] = (!state[key] || 0 === state[key].length) ? `${capitalizeFirstLetter(key)} is required` : '';\n            return obj;\n        }, {});\n\n        if (!isValid) handleError(error_);\n        else await onSubmit(clone);\n    };\n\n    function capitalizeFirstLetter(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n\n    const handleError = (error) => {\n        Alert.alert('Input error', 'Please input all required fields.');\n        dispatch({type: SET_ERROR, error});\n    };\n\n\n    const renderTextInput = (field, index, grouped = false) => {\n        let {name} = field;\n        let onChangeText = changeText(name);\n        let errorMessage = state[\"error\"].hasOwnProperty(name) ? state[\"error\"][name] : null;\n        let key = !grouped ? `${name}_${index}` : `${name}_arr_${index}`;\n\n        let type = field.type || TYPES.Text;\n\n        //TEXT is Default\n        let Component =\n            (<TextInput {...field}\n                        value={state[name]}\n                        errorMessage={errorMessage}\n                        onChangeText={onChangeText}\n                        keyboardType={type}\n                        testID={field.testID || name}\n                        key={key}/>);\n\n        //CHECK IF TYPE IS DROPDOWN\n        if (type === TYPES.Dropdown) {\n            Component =\n                (<DropDown label={field.label}\n                           items={field.options}\n                           value={state[name]}\n                           errorMessage={errorMessage}\n                           onValueChange={onChangeText}\n                           testID={field.testID || name}\n                           key={key}/>)\n        } else if (type === TYPES.Image) {\n            Component =\n                (<View style={{\n                        borderBottomWidth: 1,\n                        borderColor: \"#E2E2E2\",\n                        paddingVertical: 16,\n                        justifyContent: \"center\"\n                    }} key={key}>\n                        {\n                            !showImagePicker ?\n                                <Text>{\"Get Permission Props Not Passed\"}</Text>\n                                :\n                                <Image\n                                    image={state[name].length > 0 ? state[name] : null }\n                                    size={100}\n                                    borderWidth={0}\n                                    getPermission={null}\n                                    showImagePicker={showImagePicker}\n                                    onImageSelected={onChangeText}\n                                    testID={field.testID || name}\n                                    key={key}/>\n                        }\n                    </View>\n                )\n        } else if (type === TYPES.Date) {\n            Component =\n                (<DateInput label={field.label}\n                            value={state[name]}\n                            errorMessage={errorMessage}\n                            onDateSelected={onChangeText}\n                            testID={field.testID || name}\n                            key={key}/>)\n        }\n\n        if (grouped) {\n            return (\n                <View style={{marginLeft: index === 1 ? 16 : 0, flex: 1}} key={key}>\n                    {Component}\n                </View>\n            )\n        } else {\n            return Component;\n        }\n    };\n    //=================================================================================================\n\n    const value = useMemo(() => [state, dispatch], [state]);\n    return (\n        <FormContext.Provider value={value}>\n            <KeyboardAvoidingView behavior=\"padding\" style={[{flex: 1}, props.style]}>\n                <ScrollView {...scrollViewProps} contentContainerStyle={{}}>\n\n\n                    <View style={{justifyContent: \"center\", flex: 1}} testID={\"FormContainer\"}>\n                        {fields.map((field, idx) => {\n\n                            let arr = Array.isArray(field);\n                            if (!arr) return renderTextInput(field, idx);\n                            else if (arr) {\n                                return (\n                                    <View style={{flex: 1, flexDirection: \"row\"}} key={`arr_${idx}`}>\n                                        {field.map((fld, index) => renderTextInput(fld, index, true))}\n                                    </View>\n                                )\n                            }\n                        })}\n\n                        <Button title={title}\n                                onPress={onPress}\n                                loading={loading}\n                                containerStyle={styles.buttonContainer}\n                                buttonStyle={[styles.button, buttonStyle]}\n                                titleStyle={styles.buttonText}/>\n\n                        {props.children}\n\n                    </View>\n                </ScrollView>\n            </KeyboardAvoidingView>\n        </FormContext.Provider>\n    );\n};\n\n\nForm.defaultProps = {\n    fields: [],\n    initialData: null,\n    onSubmit: null,\n    title: \"Submit\",\n    loading: false,\n    style: {backgroundColor: 'transparent'},\n    buttonStyle: {},\n    keyboardShouldPersistTaps: 'handled',\n    showImagePicker: null,\n};\n\nconst styles = StyleSheet.create({\n    buttonContainer: {\n        marginTop: 35\n    },\n\n    button: {\n        height: 60,\n        backgroundColor: \"#733AC2\"\n    },\n\n    buttonText: {\n        fontSize: 18,\n        color: \"#fff\",\n        fontFamily: \"HelveticaNeue-Medium\"\n    }\n});\n"]},"metadata":{},"sourceType":"module"}