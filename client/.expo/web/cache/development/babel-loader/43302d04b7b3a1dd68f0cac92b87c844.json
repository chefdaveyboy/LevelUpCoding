{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/rachael-andrew/Bootcamp/Project-3:AuthAPI/project-3/node_modules/react-native-basic-form/helpers/DateInput.js\";\nimport React, { useState, useMemo, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport DateTimePicker from \"react-native-modal-datetime-picker\";\nimport moment from \"moment\";\nexport default function DatePicker_(props) {\n  var _props;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      date = _useState2[0],\n      setDate = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isVisible = _useState4[0],\n      setIsVisible = _useState4[1];\n\n  var label = props.label,\n      mode = props.mode,\n      onDateSelected = props.onDateSelected,\n      value = props.value;\n  var dateProps = (_props = props, mode = _props.mode, placeholder = _props.placeholder, format = _props.format, minDate = _props.minDate, maxDate = _props.maxDate, confirmBtnText = _props.confirmBtnText, cancelBtnText = _props.cancelBtnText, customStyles = _props.customStyles, style = _props.style, showIcon = _props.showIcon, _props);\n  useEffect(function () {\n    if (value && value !== undefined && value !== 'undefined') {\n      dateProps['date'] = value;\n      setDate(value);\n    }\n  }, []);\n\n  function onTap() {\n    setIsVisible(true);\n  }\n\n  function onDatePicked(date) {\n    setDate(date);\n    onDateSelected(date);\n    setIsVisible(false);\n  }\n\n  var dateFormatted = useMemo(function () {\n    if (date) {\n      var date_ = moment(date).format(\"DD MMM\");\n      var time_ = moment(date).format(\"HH:mm\");\n      return date_ + \" at \" + time_;\n    }\n\n    return \"\";\n  }, [date]);\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, label), React.createElement(TouchableHighlight, {\n    onPress: onTap,\n    underlayColor: \"rgba(0, 0, 0, 0)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: styles.input,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  }, \"\" + dateFormatted), React.createElement(DateTimePicker, _extends({\n    isVisible: isVisible,\n    onConfirm: onDatePicked\n  }, dateProps, {\n    onCancel: function onCancel() {\n      return setIsVisible(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  })))), props.errorMessage !== null ? React.createElement(Text, {\n    style: styles.error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 46\n    }\n  }, props.errorMessage) : null);\n}\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"#fff\",\n    marginTop: 19,\n    marginBottom: 0,\n    borderBottomWidth: 1,\n    borderColor: '#86939e',\n    height: 60\n  },\n  label: {\n    color: \"#86939e\",\n    fontSize: 16\n  },\n  input: {\n    height: 40,\n    justifyContent: \"center\",\n    color: \"black\"\n  },\n  text: {\n    fontSize: 18,\n    color: \"black\"\n  },\n  error: {\n    color: \"#ff190c\",\n    fontSize: 12\n  }\n});\nDatePicker_.defaultProps = {\n  label: \"\",\n  mode: \"datetime\",\n  placeholder: \"select date\",\n  minDate: \"2019-01-01\",\n  maxDate: new Date(),\n  confirmBtnText: \"Confirm\",\n  cancelBtnText: \"Cancel\",\n  customStyles: {\n    dateInput: styles.input\n  },\n  onDateChange: null,\n  style: {},\n  showIcon: false\n};","map":{"version":3,"sources":["/Users/rachael-andrew/Bootcamp/Project-3:AuthAPI/project-3/node_modules/react-native-basic-form/helpers/DateInput.js"],"names":["React","useState","useMemo","useEffect","DateTimePicker","moment","DatePicker_","props","date","setDate","isVisible","setIsVisible","label","mode","onDateSelected","value","dateProps","placeholder","format","minDate","maxDate","confirmBtnText","cancelBtnText","customStyles","style","showIcon","undefined","onTap","onDatePicked","dateFormatted","date_","time_","styles","container","input","text","errorMessage","error","StyleSheet","create","backgroundColor","marginTop","marginBottom","borderBottomWidth","borderColor","height","color","fontSize","justifyContent","defaultProps","Date","dateInput","onDateChange"],"mappings":"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","sourcesContent":["import React, {useState, useMemo, useEffect} from 'react';\nimport {StyleSheet, Text, View, TouchableHighlight} from 'react-native';\nimport DateTimePicker from \"react-native-modal-datetime-picker\";\nimport moment from \"moment\";\n// import {Appearance} from 'react-native-appearance';\n\nexport default function DatePicker_(props) {\n    const [date, setDate] = useState(null);\n    const [isVisible, setIsVisible] = useState(false);\n\n    let {label, mode, onDateSelected, value} = props;\n\n    let dateProps = {\n        mode,\n        placeholder,\n        format,\n        minDate,\n        maxDate,\n        confirmBtnText,\n        cancelBtnText,\n        customStyles,\n        style, showIcon\n    } = props;\n\n\n    useEffect(() => {\n        if (value && value !== undefined && value !== 'undefined'){\n            dateProps['date'] = value;\n            setDate(value)\n        }\n    }, []);\n\n\n    function onTap(){\n        setIsVisible(true)\n    }\n\n    function onDatePicked(date) {\n        setDate(date);\n        onDateSelected(date);\n        setIsVisible(false)\n    }\n\n    const dateFormatted = useMemo(() => {\n        if (date){\n            let date_ = moment(date).format(\"DD MMM\");\n            let time_ = moment(date).format(\"HH:mm\");\n\n            return `${date_} at ${time_}`\n        }\n\n        return \"\"\n\n    }, [date])\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.label}>{label}</Text>\n            <TouchableHighlight onPress={onTap} underlayColor=\"rgba(0, 0, 0, 0)\" >\n                <View style={styles.input}>\n                    <Text style={styles.text}>{`${dateFormatted}`}</Text>\n                    <DateTimePicker\n                        isVisible={isVisible}\n                        onConfirm={onDatePicked}\n                        {...dateProps}\n                        // isDarkModeEnabled={Appearance.getColorScheme() === 'dark'}\n                        onCancel={() => setIsVisible(false)}/>\n                </View>\n            </TouchableHighlight>\n            {(props.errorMessage !== null) ? <Text style={styles.error}>{props.errorMessage}</Text> : null}\n        </View>\n    );\n}\n\n\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: \"#fff\",\n        marginTop: 19,\n        marginBottom:0,\n        borderBottomWidth: 1,\n        borderColor: '#86939e',\n        height: 60\n    },\n\n    label: {color: \"#86939e\", fontSize: 16},\n\n    input: {height: 40, justifyContent:\"center\", color: \"black\"},\n    text: {fontSize: 18, color: \"black\"},\n    error:{color:\"#ff190c\", fontSize: 12, },\n\n});\n\n\nDatePicker_.defaultProps = {\n    label: \"\",\n    mode:\"datetime\",\n    placeholder: \"select date\",\n    minDate: \"2019-01-01\",\n    maxDate: new Date(),\n    confirmBtnText: \"Confirm\",\n    cancelBtnText: \"Cancel\",\n    customStyles: {\n        dateInput: styles.input\n    },\n    onDateChange: null,\n    style: {},\n    showIcon:false,\n};"]},"metadata":{},"sourceType":"module"}